import math
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')



forex = pd.read_csv("forex.csv")
forex



plt.figure(figsize=(16,8))
plt.title("Pounds to USD Exchange Rate History")
plt.plot(forex[['UK/US','EUR/US']])
plt.xlabel('Date', fontsize=18)
plt.ylabel('Close Price USD ($)', fontsize=18)
axes = plt.gca()
axes.set_ylim([0.0,2.0])
plt.show()



scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)
scaled_data



train_data = scaled_data[0:training_data_len , :]
X_train = []
Y_train = []
for i in range(10, len(train_data)):
  X_train.append(train_data[i-10:i, 0])
  Y_train.append(train_data[i, 0])
print(X_train)
print(Y_train)
print()



X_train, Y_train = np.array(X_train), np.array(Y_train)


X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_train.shape


model = Sequential()
model.add(LSTM(400, return_sequences=True, input_shape= (X_train.shape[1], 1)))
model.add(LSTM(400, return_sequences= False))
model.add(Dense(25))
model.add(Dense(1))

model.compile(optimizer='adam', loss='mean_squared_error')


model.fit(X_train, Y_train, batch_size=1, epochs=1)


test_data = scaled_data[training_data_len - 10: , :]
x_test = []
y_test = dataset[training_data_len:, :]
for i in range(10, len(test_data)):
  x_test.append(test_data[i-10:i, 0])
x_test = np.array(x_test)
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1 ))


predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)


rmse=np.sqrt(np.mean(((predictions - y_test)**2)))
rmse


train = data[:training_data_len]
valid = data[training_data_len:]
valid['Predictions'] = predictions
plt.figure(figsize=(16,8))
plt.title('Model for Exchange Rates')
plt.xlabel('Date', fontsize=18)
plt.ylabel('USD ($)', fontsize=18)
plt.plot(train['UK/US'])
plt.plot(valid[['UK/US', 'Predictions']])
plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')
plt.show()


new_df = forex.filter(["UK/US"])
last_10_days = new_df[-10:].values
last_10_days_scaled = scaler.transform(last_10_days)
X_test = []
X_test.append(last_10_days_scaled)
X_test = np.array(X_test)
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
pred = model.predict(X_test)
pred = scaler.inverse_transform(pred)
print(last_10_days_scaled)
print(pred)
